pipeline {
    agent any
    
    environment {
        CI_CD_PROJECT = "coo-ci-cd"
        DEV_PROJECT = "coo-dev"
        TEST_PROJECT = "coo-test"
        SOURCE_CONTEXT_DIR = ""

        APP_NAME = "mongodb-seed"
        SEED_JOB_NAME = "mongodb-database-seed"
        SEED_PLAYBOOK_NAME = "seed.yml"

        DATABASE_NAME = "devapps"
        SPATIAL_COLLECTION_NAME = "spatial"
        DEVAPP_COLLECTION_NAME = "devapp"
        DEVAPP_ADDRESS_COLLECTION_NAME = "devapp_address"

        OCP_API_SERVER = "${OPENSHIFT_API_URL}"
        OCP_TOKEN = readFile('/var/run/secrets/kubernetes.io/serviceaccount/token').trim()
    
    }

    stages {
        stage('Bake Mongo Seed Container'){
            steps{
                script{
                    slackSend "${APP_NAME} Job Started - ${JOB_NAME} ${BUILD_NUMBER} (<${BUILD_URL}|Open>)"

                    def helper = load 'shared-library.groovy'
                    helper.patchBuildConfigOutputLabels(env)

                    openshift.withCluster () {
                        def buildSelector = openshift.startBuild( "${APP_NAME}" )
                        buildSelector.logs('-f')
                    }
                }
            }
        }

        stage('Seed Dev Mongo DB with data'){
            agent { label 'jenkins-slave-ansible'}
            steps {
                script{
                    def helper = load 'shared-library.groovy'
                    timeout(5) { // in minutes
                        openshift.loglevel(3)
                        helper.promoteImageWithinCluster( "${APP_NAME}", "${CI_CD_PROJECT}", "${DEV_PROJECT}" )
                        helper.applyAnsibleInventory("${SEED_PLAYBOOK_NAME}")
                    }
                }
            }
        }
    }
}
